#version 450

uniform int dynamicMatrixSize;
uniform int place;

const int MATRIX_SIZE = 512;

shared vec4 buff[MATRIX_SIZE];
shared vec4 buff2[MATRIX_SIZE];

layout(std430, binding = 1) buffer layoutName2
{
    vec4 localMatrix[];
};

layout(std430, binding = 2) buffer layoutName3
{
    uint quadsInMatrix[];
};

struct material
{
    vec4 color;
    vec4 emission;
};

layout(std430, binding = 3) buffer layoutName4
{
    material mats[];
};

layout(std430, binding = 6) buffer layoutName7
{
    int usedQuads[];
};

layout(std430, binding = 7) buffer layoutName8
{
    vec4 fRow[];
};

layout(std430, binding = 8) buffer layoutName9
{
    vec4 fColumn[];
};


layout(local_size_x = MATRIX_SIZE, local_size_y = 1) in;
void main() {
    uint trIdx = gl_GlobalInvocationID.x;

    uint idx = quadsInMatrix[trIdx];
    vec4 f_column = fColumn[trIdx];
    vec4 f_row = fRow[trIdx];
    vec4 color = mats[idx].color;
    vec4 g_column = fColumn[trIdx];
    vec4 g_row = fRow[trIdx];
    vec4 placeColor = mats[quadsInMatrix[place]].color;

    localMatrix[place * MATRIX_SIZE + trIdx] = vec4(0);
    localMatrix[trIdx * MATRIX_SIZE + place] = vec4(0);

    buff[trIdx] = f_column * f_row * color;
    memoryBarrierShared();
    barrier();

    for (int i = MATRIX_SIZE / 2; i > 0; i >>= 1) {
        if (trIdx < i) {
            buff[trIdx] += buff[i + trIdx];
        }
        memoryBarrierShared();
        barrier();
    }

    vec4 double_reflection = buff[0] * placeColor;

    g_column += f_column * double_reflection;
    g_row += fRow[trIdx] * double_reflection;

    buff[trIdx] = f_column * color;
    memoryBarrierShared();
    barrier();

    for (int i = 0; i < MATRIX_SIZE; ++i) {
        g_column += localMatrix[trIdx * MATRIX_SIZE + i] * buff[i];
    }
    memoryBarrierShared();
    barrier();

    buff[trIdx] = f_row * color;
    memoryBarrierShared();
    barrier();

    for (int i = 0; i < MATRIX_SIZE; ++i) {
        g_row += localMatrix[i * MATRIX_SIZE + trIdx] * buff[i];
    }
    memoryBarrierShared();
    barrier();

    for (int i = 0; i < MATRIX_SIZE; ++i) {
        if (usedQuads[i] != 0) {
            continue;
        }
        if (trIdx == i) {
            buff[0] = g_column * placeColor;
        }
        memoryBarrierShared();
        barrier();
        localMatrix[i * MATRIX_SIZE + trIdx] += g_row * buff[0];
        memoryBarrierShared();
        barrier();
    }

    buff[trIdx] = g_row * color;
    buff2[trIdx] = (usedQuads[trIdx] != 0) ? vec4(0) : g_column;

    localMatrix[place * MATRIX_SIZE + trIdx] = g_row;
    localMatrix[trIdx * MATRIX_SIZE + place] = g_column;

    memoryBarrierShared();
    barrier();

    for (int i = MATRIX_SIZE / 2; i > 0; i >>= 1) {
        if (trIdx < i) {
            buff[trIdx] += buff[i + trIdx];
            buff2[trIdx] += buff2[i + trIdx];
        }
        memoryBarrierShared();
        barrier();
    }

    if (trIdx == 0) {
        localMatrix[place * MATRIX_SIZE + place] = buff[0] * buff2[0];
    }
}
