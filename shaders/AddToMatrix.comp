#version 450

uniform int dynamicMatrixSize;
uniform int place;

const int MATRIX_SIZE = MATRIX_SIZE_VALUE;
const int THREADS_COUNT = min(1024, MATRIX_SIZE / 2);

shared vec3 buff[THREADS_COUNT];
shared vec3 buff2[THREADS_COUNT];

layout(std430, binding = 2) buffer layoutName3
{
    uint quadsInMatrix[];
};

layout(std430, binding = 4) buffer layoutName7
{
    int usedQuads[];
};

layout(std430, binding = 5) buffer layoutName8
{
    float fRow[];
};

layout(std430, binding = 6) buffer layoutName9
{
    float fColumn[];
};

layout(std430, binding = 8) buffer layoutName11
{
    vec3 gRow[];
};

layout(std430, binding = 9) buffer layoutName12
{
    vec3 gColumn[];
};

layout(std430, binding = 10) buffer layoutName13
{
    vec3 localColors[];
};


layout(local_size_x = THREADS_COUNT) in;
layout(location = 0, rgba16f) uniform image2D localMatrixTex;
void main() {
    uint trIdx = gl_LocalInvocationID.x;
    uint columnIdx = gl_WorkGroupID.x;

    vec3 b1_sum = vec3(0);
    vec3 b2_sum = vec3(0);

    for (int iter = 0; iter < MATRIX_SIZE / THREADS_COUNT / 2; ++iter) {
        vec3 color1 = localColors[trIdx + iter * THREADS_COUNT];
        vec3 g_column1 = gColumn[trIdx + iter * THREADS_COUNT];
        vec3 g_row1 = gRow[trIdx + iter * THREADS_COUNT];
        uint isUsed1 = usedQuads[trIdx + iter * THREADS_COUNT];
        vec3 color2 = localColors[trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2];
        vec3 g_column2 = gColumn[trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2];
        vec3 g_row2 = gRow[trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2];
        uint isUsed2 = usedQuads[trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2];

        imageStore(localMatrixTex, ivec2(place, trIdx + iter * THREADS_COUNT), vec4(g_row1, 0));
        imageStore(localMatrixTex, ivec2(trIdx + iter * THREADS_COUNT, place), vec4(g_column1, 0));
        imageStore(localMatrixTex, ivec2(place, trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2), vec4(g_row2, 0));
        imageStore(localMatrixTex, ivec2(trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2, place), vec4(g_column2, 0));

        buff[trIdx] = g_row1 * color1 + g_row2 * color2;
        buff2[trIdx] = (isUsed1 != 0 ? vec3(0) : g_column1) + (isUsed2 != 0 ? vec3(0) : g_column2);
        memoryBarrierShared();
        barrier();

        for (int i = MATRIX_SIZE / 4; i > 32; i >>= 1) {
            if (trIdx < i) {
                buff[trIdx] += buff[i + trIdx];
                buff2[trIdx] += buff2[i + trIdx];
            }
            memoryBarrierShared();
            barrier();
        }

        for (int i = 32; i > 0; i >>= 1) {
            if (trIdx < i) {
                buff[trIdx] += buff[i + trIdx];
                buff2[trIdx] += buff2[i + trIdx];
            }
        }

        if (trIdx == 0) {
            b1_sum += buff[0];
            b2_sum += buff2[0];
        }

        memoryBarrierShared();
        barrier();
    }

    if (gl_GlobalInvocationID.x == 0) {
        imageStore(localMatrixTex, ivec2(place, place), vec4(b1_sum * b2_sum, 0));
    }
}
