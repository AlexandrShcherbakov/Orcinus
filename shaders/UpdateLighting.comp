#version 450

uniform int dynamicMatrixSize;
const int MATRIX_SIZE = 1024;

layout(std430, binding = 0) buffer layoutName1
{
    vec4 indirect_light[];
};

layout(std430, binding = 2) buffer layoutName3
{
    uint quadsInMatrix[];
};

struct material
{
    vec4 color;
    vec4 emission;
};

layout(std430, binding = 3) buffer layoutName4
{
    material mats[];
};

layout(local_size_x = MATRIX_SIZE, local_size_y = 1) in;
layout (location = 0, rgba16f) uniform image2D localMatrixTex;
void main() {
    uint globalIdx = quadsInMatrix[gl_GlobalInvocationID.x];
    vec4 lighting = vec4(0, 0, 0, 0);
    for (int i = 0; i < MATRIX_SIZE; ++i) {
        lighting += mats[quadsInMatrix[i]].emission * imageLoad(localMatrixTex, ivec2(gl_GlobalInvocationID.x, i));
    }
    indirect_light[globalIdx] = lighting;
}
