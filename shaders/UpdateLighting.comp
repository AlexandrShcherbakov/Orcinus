#version 450

uniform int dynamicMatrixSize;

const int MATRIX_SIZE = MATRIX_SIZE_VALUE;
const int THREADS_COUNT = min(1024, MATRIX_SIZE / 2);
shared vec4 buff[THREADS_COUNT];

layout(std430, binding = 0) buffer layoutName1
{
    vec4 indirect_light[];
};

layout(std430, binding = 2) buffer layoutName3
{
    uint quadsInMatrix[];
};

struct material
{
    vec4 color;
    vec4 emission;
};

layout(std430, binding = 3) buffer layoutName4
{
    material mats[];
};

layout(std430, binding = 11) buffer layoutName13
{
    vec4 localEmission[];
};

layout(local_size_x = THREADS_COUNT) in;
layout (location = 0, rgba16f) uniform image2D localMatrixTex;
void main() {
    uint trIdx = gl_LocalInvocationID.x;
    uint rowIdx = gl_WorkGroupID.x;

    vec4 result = vec4(0);

    for (int iter = 0; iter < MATRIX_SIZE / THREADS_COUNT / 2; ++iter) {
        vec4 emission1 = localEmission[trIdx + iter * THREADS_COUNT];//mats[quadsInMatrix[trIdx + iter * THREADS_COUNT]].emission;
        vec4 ff1 = imageLoad(localMatrixTex, ivec2(rowIdx, trIdx + iter * THREADS_COUNT));
        vec4 emission2 = localEmission[trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2];//mats[quadsInMatrix[trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2]].emission;
        vec4 ff2 = imageLoad(localMatrixTex, ivec2(rowIdx, trIdx + iter * THREADS_COUNT + MATRIX_SIZE / 2));

        buff[trIdx] = emission1 * ff1 + emission2 * ff2;
        memoryBarrierShared();
        barrier();

        for (int i = MATRIX_SIZE / 4; i > 32; i >>= 1) {
            if (trIdx < i) {
                buff[trIdx] += buff[i + trIdx];
            }
            memoryBarrierShared();
            barrier();
        }

        for (int i = 32; i > 0; i >>= 1) {
            if (trIdx < i) {
                buff[trIdx] += buff[i + trIdx];
            }
        }

        if (trIdx == 0) {
            result += buff[0];
        }

        memoryBarrierShared();
        barrier();
    }

    if (trIdx == 0) {
        indirect_light[quadsInMatrix[rowIdx]] = result + localEmission[rowIdx];
    }
}
