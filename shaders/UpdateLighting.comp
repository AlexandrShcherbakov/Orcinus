#version 450

uniform int dynamicMatrixSize;

layout(std430, binding = 0) buffer layoutName1
{
    vec4 indirect_light[];
};

layout(std430, binding = 1) buffer layoutName2
{
    vec4 localMatrix[];
};

layout(std430, binding = 2) buffer layoutName3
{
    uint quadsInMatrix[];
};

struct material
{
    vec4 color;
    vec4 emission;
};

layout(std430, binding = 3) buffer layoutName4
{
    material mats[];
};

layout(local_size_x = 512, local_size_y = 1) in;
void main() {
    uint globalIdx = quadsInMatrix[gl_GlobalInvocationID.x];
    vec4 lighting = vec4(0, 0, 0, 0);
    for (int i = 0; i < dynamicMatrixSize; ++i) {
        lighting += mats[quadsInMatrix[i]].emission * localMatrix[gl_GlobalInvocationID.x * dynamicMatrixSize + i];
    }
    lighting *= mats[globalIdx].color;
    lighting += mats[globalIdx].emission;
    indirect_light[globalIdx] = lighting;
}
