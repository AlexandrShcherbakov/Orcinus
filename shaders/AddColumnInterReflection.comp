#version 450

const int MATRIX_SIZE = MATRIX_SIZE_VALUE;
const int THREADS_COUNT = min(1024, MATRIX_SIZE / 2);

shared vec3 buff[THREADS_COUNT];

layout(std430, binding = 6) buffer layoutName9
{
    float fColumn[];
};

layout(std430, binding = 9) buffer layoutName12
{
    vec3 gColumn[];
};

layout(std430, binding = 10) buffer layoutName13
{
    vec3 localColors[];
};


layout(local_size_x = THREADS_COUNT) in;
layout(location = 0, rgba16f) uniform image2D localMatrixTex;
void main() {
    uint trIdx;
    uint rowIdx = gl_WorkGroupID.x;

    vec3 result = vec3(0);

    if (MATRIX_SIZE > 2048) {
        trIdx = gl_GlobalInvocationID.x;
        for (int i = 0; i < MATRIX_SIZE; ++i) {
            result += fColumn[i] * localColors[i] * imageLoad(localMatrixTex, ivec2(trIdx, i)).rgb;
        }
        gColumn[trIdx] += result;
    } else {
        trIdx = gl_LocalInvocationID.x;
        for (int iter = 0; iter < MATRIX_SIZE / THREADS_COUNT / 2; ++iter) {
            buff[trIdx] = fColumn[trIdx + iter * THREADS_COUNT * 2] * localColors[trIdx + iter * THREADS_COUNT * 2] * imageLoad(localMatrixTex, ivec2(rowIdx, trIdx + iter * THREADS_COUNT * 2)).rgb
            + fColumn[trIdx + iter * THREADS_COUNT * 2 + MATRIX_SIZE / 2] * localColors[trIdx + iter * THREADS_COUNT * 2 + MATRIX_SIZE / 2] * imageLoad(localMatrixTex, ivec2(rowIdx, trIdx + iter * THREADS_COUNT * 2 + MATRIX_SIZE / 2)).rgb;
            memoryBarrierShared();
            barrier();

            for (int i = MATRIX_SIZE / 4; i > 32; i >>= 1) {
                if (trIdx < i) {
                    buff[trIdx] += buff[i + trIdx];
                }
                memoryBarrierShared();
                barrier();
            }

            for (int i = 32; i > 0; i >>= 1) {
                if (trIdx < i) {
                    buff[trIdx] += buff[i + trIdx];
                }
            }

            if (trIdx == 0) {
                result += buff[0];
            }
        }
        if (trIdx == 0) {
            gColumn[rowIdx] += result;
        }
    }
}
