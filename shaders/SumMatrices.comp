#version 450

uniform int dynamicMatrixSize;
uniform int place;

const int MATRIX_SIZE = 1024;
const int THREADS_COUNT = 32;

shared vec3 g_sub_column[THREADS_COUNT];
shared vec3 g_sub_row[THREADS_COUNT];

layout(std430, binding = 4) buffer layoutName7
{
    int usedQuads[];
};

layout(std430, binding = 8) buffer layoutName11
{
    vec3 gRow[];
};

layout(std430, binding = 9) buffer layoutName12
{
    vec3 gColumn[];
};

layout(std430, binding = 10) buffer layoutName13
{
    vec3 localColors[];
};


layout(local_size_x = THREADS_COUNT, local_size_y = THREADS_COUNT) in;
layout(location = 0, rgba16f) uniform image2D localMatrixTex;
void main() {
    vec3 placeColor = localColors[place];
    uvec2 trIdx = gl_LocalInvocationID.xy;

    if (gl_LocalInvocationID.y == 0) {
        g_sub_column[gl_LocalInvocationID.x] = usedQuads[gl_GlobalInvocationID.x] == 0 ? gColumn[gl_GlobalInvocationID.x] * placeColor : vec3(0);
    }

    if (gl_LocalInvocationID.x == 0) {
        g_sub_row[gl_LocalInvocationID.y] = gRow[gl_GlobalInvocationID.y];
    }

    memoryBarrierShared();
    barrier();

    imageStore(localMatrixTex, ivec2(gl_GlobalInvocationID.xy), imageLoad(localMatrixTex, ivec2(gl_GlobalInvocationID.xy)) + vec4(g_sub_column[gl_LocalInvocationID.x] * g_sub_row[gl_LocalInvocationID.y], 0));
}
